openapi: 3.0.0
info:
  title: API Propelize Coffee Brain
  version: 1.0.0
  description: |
    Cette API permet de gérer les données de l'application Propelize Coffee Brain.
    Elle inclut des endpoints pour la gestion des utilisateurs, des cafés, et des commandes.
  contact:
    name: Propelize Support
servers:
  - url: http://localhost:3000/api
    description: Serveur de développement

paths:
  /signup:
    post:
      summary: Create a new user account
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: johndoe@example.com
                password:
                  type: string
                  format: password
                  example: mySecretPassword123
      responses:
        200:
          description: User created successfully, returns JWT access token
          content:
            application/json:
              schema:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        500:
          description: Server error or invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /signin:
    post:
      summary: User sign in
      description: Authenticates a user and returns a JWT token.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - password
              properties:
                name:
                  type: string
                  example: johndoe
                password:
                  type: string
                  example: mysecretpassword
      responses:
        200:
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Authentication successful
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        400:
          description: Missing name or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: name and password are required
        401:
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid Credentials
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Not Found
  /categories:
    get:
      summary: Retrieve a list of categories
      tags:
        - Categories
      responses:
        200:
          description: A list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        204:
          description: No categories found
        500:
          description: Server error
  /category:
    post:
      summary: Create a new category
      tags:
        - Categories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryInput'
      responses:
        201:
          description: Category created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        500:
          description: Server error
  /order:
    post:
      summary: Create a new order
      tags:
        - Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                quantity:
                  type: integer
              required:
                - productId
                - quantity
      responses:
        201:
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Insufficient stock
        500:
          description: Server error
  /order/{id}:
    get:
      summary: Get an order by ID
      tags:
        - Orders
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Order found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        404:
          description: Order not found
        500:
          description: Server error
  /product:
    post:
      summary: Create a new product
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        201:
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        500:
          description: Server error
  /products:
    get:
      summary: Get list of products
      tags:
        - Products
      responses:
        200:
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        204:
          description: No products found
        400:
          description: Bad request
  /product/{id}:
    get:
      summary: Get product by ID
      tags:
        - Products
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        204:
          description: Product not found
        500:
          description: Server error
    put:
      summary: Update product by ID
      tags:
        - Products
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        201:
          description: Product updated
        500:
          description: Server error
    delete:
      summary: Delete product by ID
      tags:
        - Products
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        204:
          description: Product deleted
        500:
          description: Server error
components:
  schemas:
    Category:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the category
          example: "60d0fe4f5311236168a109ca"
        name:
          type: string
          description: Name of the category
          example: "Electronics"
        description:
          type: string
          description: Description of the category
          example: "Devices and gadgets"
        imageUrl:
          type: string
          description: URL to an image representing the category
          example: "https://example.com/images/electronics.png"
        createdAt:
          type: string
          format: date-time
          description: Date and time when the category was created
          example: "2024-06-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Date and time when the category was last updated
          example: "2024-06-02T15:30:00Z"
      required:
        - name
    Inventory:
      type: object
      properties:
        _id:
          type: string
          format: uuid
          description: The unique identifier for the inventory item.
        quantity:
          type: integer
          description: The quantity of the product in inventory.
        productId:
          type: string
          format: uuid
          description: The ID of the related product.
        createdAt:
          type: string
          format: date-time
          description: The date and time when the inventory record was created.
        updatedAt:
          type: string
          format: date-time
          description: The date and time when the inventory record was last updated.
      required:
        - quantity
        - productId
    Order:
      type: object
      properties:
        _id:
          type: string
          format: objectid
          description: Unique identifier for the order
        userId:
          type: string
          format: objectid
          description: Reference to the user who placed the order
        status:
          type: string
          enum:
            - pending
            - shipped
            - delivered
            - cancelled
          description: Status of the order
        productId:
          type: string
          format: objectid
          description: Reference to the product ordered
        shippingAddress:
          type: string
          description: Shipping address for the order
        quantity:
          type: integer
          description: Quantity of the product ordered
        orderDate:
          type: string
          format: date-time
          description: Date when the order was placed
    Product:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
        stock:
          type: number
        imageUrl:
          type: string
        categoryId:
          type: string  
    User:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
